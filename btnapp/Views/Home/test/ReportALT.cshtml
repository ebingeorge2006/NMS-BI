@model btnapp.Models.EmbedConfig
@{
    ViewBag.Title = "Power Bi Report";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles{
    <link href="~/Content/alertifyjs/alertify.min.css" rel="stylesheet" />
}


<!-- Google Analytics -->
<script>
    (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments)
        }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-118127007-1', 'auto');
    ga('send', 'pageview');
</script>
<!-- End Google Analytics -->

<script src="https://npmcdn.com/es6-promise@3.2.1"></script>
<script src="~/scripts/powerbi.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.9.0/underscore-min.js"></script>
<script type="text/javascript" src="~/Scripts/jspdf.debug.js"></script>
<script type="text/javascript" src="~/Scripts/alertify.min.js"></script>

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div id="errorWrapper">
        <h2>
            Error
        </h2>
        <pre>
            @Model.ErrorMessage
        </pre>
    </div>

    return;
}

<div class="headerBI" style="height:50px; padding-top: 10px;">
    <ul class="action-items">
        <li>
            <div style="display:none;">
                @using (Html.BeginForm("ConvertHtmlCodeToPdf", "Home", FormMethod.Post))
                {
                    <input type="hidden" id="hdnHtmlCode" name="hdnHtmlCode" />
                    <input type="submit" id="CreatePDFDocument" value="Export To PDF Hidden" />
                    <div id="dvExportedData"></div>
                }
            </div>
            <button id="export_pdf" type="button" class="btn btn-primary" disabled> Export to PDF </button>
        </li>
        <li>
            <button id="export_csv" type="button" class="btn btn-info" disabled> Export to CSV </button>
        </li>
    </ul>
</div>
<div id="reportContainer"></div>
<script>
                $(document).ready(function () {
                    resizeContent();
                    /* */
                 
                    $(window).resize(function () {
                        resizeContent();
                    });
                    /* */
                });

                function resizeContent() {
                    var width = $(window).width();
                   if (width >= 320 && width <= 759) {
                        $width = $(window).width() + 410;
                        $('#idIframe').height($width);
                    }
                    else if (width >= 760 && width <= 999) {
                        $width = $(window).width() + 760;
                        $('#idIframe').height($width);
                    }
                    else if (width >= 1000 && width <= 1198) {
                        $width = $(window).width() + 990;
                        $('#idIframe').height($width);
                    }
                     else if (width >= 1200 && width <= 1339) {
                        $width = $(window).width() + 1148;
                        $('#idIframe').height($width);
                    }
                    else if (width >= 1340 && width <= 1549) {
                        $width = $(window).width() + 1225;
                        $('#idIframe').height($width);
                    }
                    else if (width >= 1550 && width <= 1900) {
                        $width = $(window).width() + 1434;
                        $('#idIframe').height($width);
                    }
                     else if (width >= 1910) {
                        $width = $(window).width() + 1910;
                        $('#idIframe').height($width);
                    }
                }
            </script>
<script>

    var cache_width, a4;

    // Read embed application token from Model
    /**/
    var accessToken = "@Model.EmbedToken.Token";
    /**/

    // Read embed URL from Model
    /**/
    var embedUrl = "@Html.Raw(Model.EmbedUrl)";
    /**/

    // Read report Id from Model
    /**/
    var embedReportId = "@Model.Id";
    /**/

    // Get models. models contains enums that can be used.
    var models = window['powerbi-client'].models;

    // Embed configuration used to describe the what and how to embed.
    // This object is used when calling powerbi.embed.
    // This also includes settings and options such as filters.
    // You can find more information at https://github.com/Microsoft/PowerBI-JavaScript/wiki/Embed-Configuration-Details.
    var config = {
        type: 'report',
        tokenType: models.TokenType.Embed,
        accessToken: accessToken,
        embedUrl: embedUrl,
        id: embedReportId,
        permissions: models.Permissions.All,
        settings: {
            filterPaneEnabled: false,
            navContentPaneEnabled: false

        }
    };

    // Get a reference to the embedded report HTML element
    var reportContainer = $('#reportContainer')[0];

    /**/
    if ("@Model.Username" != "") {
        /**/
        $("#RLS").prop('checked', true);
        $("#RLSdiv").show();
    }
    else {
        $("#RLS").prop('checked', false);
        $("#RLSdiv").hide();
    }

    /**/
    if ("@Model.IsEffectiveIdentityRequired.GetValueOrDefault()" == "True") {
        /**/
        $("#noRLSdiv").hide();
        $("#RLS").removeAttr("disabled");
        $("#RLS").change(function () {
            if ($(this).is(":checked")) {
                $("#RLSdiv").show(300);
            } else {
                $("#RLSdiv").hide(200);
            }
        });
    }
    else {
        $("#noRLSdiv").show();
    }
    // Embed the report and display it within the div container.
    var report = powerbi.embed(reportContainer, config);

    // Report.off removes a given event handler if it exists.
    report.off("loaded");
    report.off("pageChanged");
    report.off("rendered");
    report.off("tileClicked");
    report.off("dataSelected");




    console.log('loading..');
    // Report.on will add an event handler which prints to Log window.
    report.on("loaded", function () {
        //alertify.warning('Report Loaded..');
    });

    // Report.on will add an event listener.
    report.on("pageChanged", function (event) {

        var page = event.detail.newPage;

        ga('send', {
            hitType: 'event',
            eventCategory: 'Report',
            eventAction: 'Report Viewed',
            eventLabel: page.displayName,
            fieldsObject: {
                DisplayName: page.displayName,
                name: page.name
            }
        });


        var obj = {
            hitType: 'event',
            eventCategory: 'Report',
            eventAction: 'Report Viewed',
            eventLabel: page.displayName
        }

        if ($('#toggleNotifications').is(":checked")) {
            alertify.success((library.json.prettyPrint(obj)));
        }


    });


    // Report.on will add an event listener.
    report.on("rendered", function (event) {
        var data = event.detail;

        document.getElementById("export_pdf").disabled = false;
        document.getElementById("export_pdf").addEventListener("click", exportToPDF);

        document.getElementById("export_csv").disabled = false;
        document.getElementById("export_csv").addEventListener("click", exportToCSV);
    });


    // Report.on will add an event listener.
    report.on("dataSelected", function (event) {


        var eventDetail = event.detail;
        if (eventDetail.dataPoints.length > 0) {


            for (var i = 0; i < eventDetail.dataPoints.length; i++) {
                ga('send', {
                    hitType: 'event',
                    eventCategory: eventDetail.page.displayName + ' : Data Filter',
                    eventAction: eventDetail.visual.title,
                    eventLabel: eventDetail.dataPoints[i].identity[0].equals
                });
            }

            for (var i = 0; i < eventDetail.dataPoints.length; i++) {
                var obj = {
                    hitType: 'event',
                    eventCategory: eventDetail.page.displayName + ' : Data Filter',
                    eventAction: eventDetail.visual.title,
                    eventLabel: eventDetail.dataPoints[i].identity[0].equals
                }

                if ($('#toggleNotifications').is(":checked")) {
                    alertify.success((library.json.prettyPrint(obj)));
                }
            }

        }


    });


    report.on("error", function (event) {
        report.off("error");
    });


</script>

<script type="text/javascript" src="~/Scripts/reports/report_b4d62e59-b521-436d-9780-96555806f85c.js"></script>
<script type="text/javascript" src="~/Scripts/lz-string.min.js"></script>